{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKeys.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","className","launch_success","mission_name","launch_date_local","to","flight_number","MissionKeys","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","LAUNCH_QUERY","Launch","props","useParams","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","displayLaunch","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46d55ce3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.052f56a2.png\";","import React from 'react';\r\n// import Moment from 'react-moment';\r\nimport {Link }from 'react-router-dom';\r\n\r\nexport default function LaunchItem({launch}) {\r\n\r\n    function setTextColor(){\r\n        if(launch.launch_success) return 'text-success';\r\n        else return 'text-danger';\r\n    }\r\n\r\n    return (\r\n        <div className=\"card card-body mb-3 \">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4> Mission: <span className={setTextColor()}> {launch.mission_name} </span> </h4>\r\n                    <p> Date: {launch.launch_date_local} </p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${launch.flight_number}`} className=\"btn btn-secondary\"> Launch Details </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MissionKeys() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className= \"px-3 mr-2 bg-success\"/> = Success\r\n            </p>\r\n            <p>\r\n                <span className= \"px-3 mr-2 bg-danger\"/> = Failed\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKeys from './MissionKeys';\r\n\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Launches() {\r\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY); //loading will be a boolean, error will give us error, data will give us data\r\n\r\n    function displayLaunches(){\r\n        if(loading) return <h4>Loading ... </h4>;\r\n        if(error) console.log(error);\r\n        console.log(data);\r\n\r\n        return(\r\n            <>\r\n                <MissionKeys/>\r\n               {\r\n                   data.launches.map(launch =>(\r\n                       <LaunchItem key={launch.flight_number} launch={launch}/>\r\n                   ))\r\n               } \r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"display-4 my-3\"> Launches </h1>\r\n            {displayLaunches()}\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { useParams } from \"react-router\";\r\nimport {Link }from 'react-router-dom';\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local,\r\n      rocket{\r\n          rocket_id\r\n          rocket_name\r\n          rocket_type\r\n      }\r\n     \r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Launch(props) {\r\n    \r\n    let {flight_number} = useParams();\r\n    flight_number = parseInt(flight_number);\r\n\r\n    const { loading, error, data } = useQuery(LAUNCH_QUERY,{\r\n        variables: { flight_number },\r\n    });\r\n    \r\n    \r\n\r\n    function displayLaunch(){\r\n        if(loading) return <h4>Loading ... </h4>;\r\n        if(error) console.log(error)\r\n\r\n        const {mission_name, flight_number, launch_year, launch_success, rocket:{rocket_id,rocket_name,rocket_type}} = data.launch\r\n\r\n        return(\r\n            <div>\r\n                <h1 className=\"display-4 my-3\">\r\n                    <span className=\"text-dark\">Mission:</span>{mission_name}\r\n                </h1>\r\n                <h4 className=\"mb-3\"> Launch Details </h4>\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">\r\n                        Flight Number: {flight_number}\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        Launch Year: {launch_year}\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        Launch Successful: <span className={launch_success ? \"text-success\": \"text-danger\"}> {launch_success ? \"Yes\": \"No\"} </span>\r\n                    </li>\r\n                    \r\n                </ul>\r\n                <h4 className=\"my-3\"> Rocket Details </h4>\r\n                <ul className=\"list-group\">\r\n                    <li className= \"list-group-item\"> Rocket ID: {rocket_id} </li>\r\n                    <li className= \"list-group-item\"> Rocket Name: {rocket_name} </li>\r\n                    <li className= \"list-group-item\"> Rocket Type: {rocket_type} </li>\r\n                </ul>\r\n                <hr/>\r\n                <Link to=\"/\" className=\"btn btn-secondary\"> Back </Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>Launch</h1>\r\n            {displayLaunch()}\r\n        </>\r\n    )\r\n}\r\n","import { ApolloClient, InMemoryCache, ApolloProvider} from '@apollo/client';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\nimport './App.css';\nimport logo from './logo.png';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({  //This object was made using Constructor function of JavaScript\n  uri: '/graphql', \n  cache: new InMemoryCache()\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>  \n      <Router>\n        <div className=\"container\">\n          <img \n            src={logo} \n            alt=\"SpaceX\" \n            style={{width:300, display: 'block', margin:'auto'}}\n          />\n          <Route exact path=\"/\" >\n            <Launches/>\n          </Route>\n          <Route exact path=\"/launch/:flight_number\">\n            <Launch/>\n          </Route>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}